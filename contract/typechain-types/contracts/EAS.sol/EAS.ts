/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EASInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MAINTAINER_ROLE"
      | "SEPARATOR"
      | "activate"
      | "configs"
      | "dc"
      | "deactivate"
      | "deactivateAll"
      | "getAllowMaintainerAccess"
      | "getCommitment"
      | "getNumAlias"
      | "getPublicAliases"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "maxNumAlias"
      | "renounceRole"
      | "revokeRole"
      | "setDc"
      | "setMaxNumAlias"
      | "setPublicAliases"
      | "setUpgradedFrom"
      | "supportsInterface"
      | "toggleMaintainerAccess"
      | "upgradedFrom"
      | "verify"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAINTAINER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SEPARATOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activate",
    values: [string, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "configs", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "dc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deactivate",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowMaintainerAccess",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitment",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumAlias",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicAliases",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumAlias",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setDc", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setMaxNumAlias",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicAliases",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradedFrom",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMaintainerAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradedFrom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [string, BytesLike, string, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAINTAINER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SEPARATOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowMaintainerAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumAlias",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicAliases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxNumAlias",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxNumAlias",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicAliases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradedFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMaintainerAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradedFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EAS extends BaseContract {
  connect(runner?: ContractRunner | null): EAS;
  waitForDeployment(): Promise<this>;

  interface: EASInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAINTAINER_ROLE: TypedContractMethod<[], [string], "view">;

  SEPARATOR: TypedContractMethod<[], [string], "view">;

  activate: TypedContractMethod<
    [
      name: string,
      aliasName: BytesLike,
      commitment: BytesLike,
      publicAlias: string
    ],
    [void],
    "nonpayable"
  >;

  configs: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, boolean] & { numAlias: bigint; disallowMaintainer: boolean }],
    "view"
  >;

  dc: TypedContractMethod<[], [string], "view">;

  deactivate: TypedContractMethod<
    [name: string, aliasName: BytesLike],
    [void],
    "nonpayable"
  >;

  deactivateAll: TypedContractMethod<[name: string], [void], "nonpayable">;

  getAllowMaintainerAccess: TypedContractMethod<
    [node: BytesLike],
    [boolean],
    "view"
  >;

  getCommitment: TypedContractMethod<
    [node: BytesLike, aliasName: BytesLike],
    [string],
    "view"
  >;

  getNumAlias: TypedContractMethod<[node: BytesLike], [bigint], "view">;

  getPublicAliases: TypedContractMethod<[node: BytesLike], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  maxNumAlias: TypedContractMethod<[], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setDc: TypedContractMethod<[_dc: AddressLike], [void], "nonpayable">;

  setMaxNumAlias: TypedContractMethod<
    [_maxNumAlias: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPublicAliases: TypedContractMethod<
    [name: string, aliases: string[]],
    [void],
    "nonpayable"
  >;

  setUpgradedFrom: TypedContractMethod<
    [_upgradedFrom: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  toggleMaintainerAccess: TypedContractMethod<
    [name: string],
    [void],
    "nonpayable"
  >;

  upgradedFrom: TypedContractMethod<[], [string], "view">;

  verify: TypedContractMethod<
    [
      name: string,
      msgHash: BytesLike,
      aliasName: string,
      forwardAddress: string,
      sig: BytesLike
    ],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAINTAINER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activate"
  ): TypedContractMethod<
    [
      name: string,
      aliasName: BytesLike,
      commitment: BytesLike,
      publicAlias: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, boolean] & { numAlias: bigint; disallowMaintainer: boolean }],
    "view"
  >;
  getFunction(nameOrSignature: "dc"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deactivate"
  ): TypedContractMethod<
    [name: string, aliasName: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateAll"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllowMaintainerAccess"
  ): TypedContractMethod<[node: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCommitment"
  ): TypedContractMethod<
    [node: BytesLike, aliasName: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNumAlias"
  ): TypedContractMethod<[node: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPublicAliases"
  ): TypedContractMethod<[node: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxNumAlias"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDc"
  ): TypedContractMethod<[_dc: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxNumAlias"
  ): TypedContractMethod<[_maxNumAlias: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublicAliases"
  ): TypedContractMethod<
    [name: string, aliases: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUpgradedFrom"
  ): TypedContractMethod<[_upgradedFrom: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "toggleMaintainerAccess"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradedFrom"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [
      name: string,
      msgHash: BytesLike,
      aliasName: string,
      forwardAddress: string,
      sig: BytesLike
    ],
    [void],
    "view"
  >;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
